from admin import admin_only
from models import *
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy import func
from datetime import datetime
import pandas as pd
from openpyxl import Workbook
from openpyxl.utils import get_column_letter
from openpyxl.styles import PatternFill, Font, Alignment
from openpyxl.utils.dataframe import dataframe_to_rows
from openpyxl.chart import BarChart, Reference
import os

# Import your models and Session
from models import Session, User, Admin, Category, ActiveSubscription, SuspendedSubscription, ReferralData

router_stats = Router()

def get_admin_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="–û—Ç—á–µ—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º üë•", callback_data="report_users"),
        InlineKeyboardButton(text="–û—Ç—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º üìë", callback_data="report_categories")
    ],
    [
        InlineKeyboardButton(text="–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç üí∞", callback_data="report_financial"),
        InlineKeyboardButton(text="–û—Ç—á–µ—Ç –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º üìä", callback_data="report_subs")
    ],
    [
        InlineKeyboardButton(text="–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç üìà", callback_data="report_full"),
        InlineKeyboardButton(text="–û—Ç—á–µ—Ç –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º üë•", callback_data="report_referrals")
    ]
])

@router_stats.message(Command("admin"))
@admin_only
async def admin_command(message: Message):       
    await message.answer("üìä –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:", reply_markup=get_admin_keyboard())


@router_stats.callback_query(F.data.startswith("report_"))
async def handle_report_callbacks(callback: CallbackQuery):
    await callback.answer()
    report_type = callback.data.split("_")[1]
    
    try:
        # Create temporary file path
        temp_file_path = f"temp_{report_type}_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        
        await callback.message.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

        if report_type == "users":
            await generate_users_report(temp_file_path)
            caption = "–û—Ç—á–µ—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
        elif report_type == "categories":
            await generate_categories_report(temp_file_path)
            caption = "–û—Ç—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
        elif report_type == "financial":
            await generate_financial_report(temp_file_path)
            caption = "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç"
        elif report_type == "subs":
            await generate_subscriptions_report(temp_file_path)
            caption = "–û—Ç—á–µ—Ç –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º"
        elif report_type == "referrals":
            await generate_referrals_report(temp_file_path)
            caption = "–û—Ç—á–µ—Ç –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º"
        else:  # full report
            await generate_full_report(temp_file_path)
            caption = "–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç"

        # Send document using FSInputFile
        await callback.message.answer_document(
            document=FSInputFile(temp_file_path),
            caption=f"üìä {caption} - {datetime.now().strftime('%d.%m.%Y')}"  # Changed date format to Russian style
        )
        
        # Clean up temporary file
        if os.path.exists(temp_file_path):
            os.remove(temp_file_path)
        
    except Exception as e:
        await callback.message.answer(f"Error generating report: {str(e)}")
        if os.path.exists(temp_file_path):
            os.remove(temp_file_path)

async def generate_users_report(file_path: str):
    wb = Workbook()
    ws = wb.active
    ws.title = "–ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
   
    with Session() as session:
        users = session.query(User).all()
       
        users_data = []
        for user in users:
            active_subs = session.query(func.count(ActiveSubscription.id))\
                .filter(ActiveSubscription.user_id == user.id).scalar()
            referred_users = session.query(func.count(User.id))\
                .filter(User.referred_by_id == user.id).scalar()
               
            users_data.append({
                'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è': user.id,
                '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è': user.username,
                '–ü–æ–ª–Ω–æ–µ –∏–º—è': f"{user.first_name or ''} {user.last_name or ''}".strip(),
                '–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏': active_subs,
                '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏': referred_users,
                '–í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π': len(user.categories)
            })
   
    df = pd.DataFrame(users_data)
   
    for r_idx, row in enumerate(dataframe_to_rows(df, index=False, header=True), 1):
        ws.append(row)
        if r_idx == 1:
            for cell in ws[1]:
                cell.font = Font(bold=True, color="FFFFFF")
                cell.fill = PatternFill(start_color="1F4E78", end_color="1F4E78", fill_type="solid")
   
    wb.save(file_path)

async def generate_categories_report(file_path: str):
    wb = Workbook()
    ws = wb.active
    ws.title = "–ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
   
    with Session() as session:
        categories = session.query(Category).all()
       
        categories_data = []
        for category in categories:
            active_subs = session.query(func.count(ActiveSubscription.id))\
                .filter(ActiveSubscription.category_id == category.id).scalar()
            suspended_subs = session.query(func.count(SuspendedSubscription.id))\
                .filter(SuspendedSubscription.category_id == category.id).scalar()
            
            # Get count of trial users
            trial_users = session.query(func.count(UsedTrial.id))\
                .filter(UsedTrial.category_id == category.id).scalar()
            
            # Get count of active trial subscriptions
            active_trials = session.query(func.count(ActiveSubscription.id))\
                .filter(
                    ActiveSubscription.category_id == category.id,
                    ActiveSubscription.subscription_type == 'trial'
                ).scalar()
               
            categories_data.append({
                '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': category.name,
                '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥': '–î–∞' if category.has_3_days_free else '–ù–µ—Ç',
                '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥': trial_users,
                '–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–±–Ω—ã–µ': active_trials,
                '–ú–µ—Å—è—á–Ω–∞—è —Ü–µ–Ω–∞': category.price_monthly,
                '–ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞': category.price_quarterly,
                '–ü–æ–ª—É–≥–æ–¥–æ–≤–∞—è —Ü–µ–Ω–∞': category.price_half_yearly,
                '–ì–æ–¥–æ–≤–∞—è —Ü–µ–Ω–∞': category.price_yearly,
                '–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏': len(category.users),
                '–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏': active_subs - active_trials,  # –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–æ–±–Ω—ã–µ
                '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏': suspended_subs,
                '–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞': category.keywords
            })
   
    df = pd.DataFrame(categories_data)
    
    # Adjust column widths based on content
    max_lengths = {column: max(df[column].astype(str).apply(len).max(), len(column)) + 2 
                  for column in df.columns}
   
    for r_idx, row in enumerate(dataframe_to_rows(df, index=False, header=True), 1):
        ws.append(row)
        if r_idx == 1:  # Header row
            for cell in ws[1]:
                cell.font = Font(bold=True, color="FFFFFF")
                cell.fill = PatternFill(start_color="1F4E78", end_color="1F4E78", fill_type="solid")
            
            # Set column widths
            for idx, column in enumerate(df.columns, 1):
                ws.column_dimensions[get_column_letter(idx)].width = max_lengths[column]
    
    # Add some basic formatting for better readability
    for row in ws.iter_rows(min_row=2):  # Starting from second row
        for cell in row:
            if isinstance(cell.value, (int, float)):
                cell.number_format = '#,##0'  # Format numbers with thousand separator
            cell.alignment = Alignment(horizontal='left')  # Left align all cells
   
    wb.save(file_path)

async def generate_financial_report(file_path: str):
    wb = Workbook()
    ws = wb.active
    ws.title = "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑"
   
    with Session() as session:
        categories = session.query(Category).all()
       
        financial_data = []
        total_revenue = 0
       
        for category in categories:
            monthly_subs = session.query(func.count(ActiveSubscription.id))\
                .filter(ActiveSubscription.category_id == category.id)\
                .filter(ActiveSubscription.subscription_type == 'monthly').scalar()
            quarterly_subs = session.query(func.count(ActiveSubscription.id))\
                .filter(ActiveSubscription.category_id == category.id)\
                .filter(ActiveSubscription.subscription_type == 'quarterly').scalar()
            yearly_subs = session.query(func.count(ActiveSubscription.id))\
                .filter(ActiveSubscription.category_id == category.id)\
                .filter(ActiveSubscription.subscription_type == 'yearly').scalar()
               
            monthly_revenue = monthly_subs * category.price_monthly
            quarterly_revenue = quarterly_subs * category.price_quarterly
            yearly_revenue = yearly_subs * category.price_yearly
            category_total = monthly_revenue + quarterly_revenue + yearly_revenue
            total_revenue += category_total
           
            financial_data.append({
                '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': category.name,
                '–ú–µ—Å—è—á–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏': monthly_subs,
                '–ú–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥': monthly_revenue,
                '–ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏': quarterly_subs,
                '–ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥': quarterly_revenue,
                '–ì–æ–¥–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏': yearly_subs,
                '–ì–æ–¥–æ–≤–æ–π –¥–æ—Ö–æ–¥': yearly_revenue,
                '–û–±—â–∏–π –¥–æ—Ö–æ–¥': category_total
            })
   
    df = pd.DataFrame(financial_data)
    df.loc[len(df)] = ['–ò–¢–û–ì–û',
                       df['–ú–µ—Å—è—á–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏'].sum(),
                       df['–ú–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥'].sum(),
                       df['–ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏'].sum(),
                       df['–ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥'].sum(),
                       df['–ì–æ–¥–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏'].sum(),
                       df['–ì–æ–¥–æ–≤–æ–π –¥–æ—Ö–æ–¥'].sum(),
                       total_revenue]
   
    for r_idx, row in enumerate(dataframe_to_rows(df, index=False, header=True), 1):
        ws.append(row)
        if r_idx == 1:
            for cell in ws[1]:
                cell.font = Font(bold=True, color="FFFFFF")
                cell.fill = PatternFill(start_color="1F4E78", end_color="1F4E78", fill_type="solid")
   
    wb.save(file_path)

async def generate_subscriptions_report(file_path: str):
    wb = Workbook()
    ws = wb.active
    ws.title = "–ê–Ω–∞–ª–∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫"
   
    with Session() as session:
        active_subs = session.query(ActiveSubscription).all()
       
        subs_data = []
        for sub in active_subs:
            subs_data.append({
                '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å': f"{sub.user.username or ''} ({sub.user.id})",
                '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': sub.category.name,
                '–¢–∏–ø': '–ú–µ—Å—è—á–Ω–∞—è' if sub.subscription_type == 'monthly' 
                      else '–ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è' if sub.subscription_type == 'quarterly'
                      else '–ì–æ–¥–æ–≤–∞—è',
                '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞': sub.start_date.strftime('%d.%m.%Y'),
                '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è': sub.end_date.strftime('%d.%m.%Y'),
                '–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π': (sub.end_date - datetime.now()).days,
                '–¶–µ–Ω–∞': getattr(sub.category, f'price_{sub.subscription_type}')
            })
   
    df = pd.DataFrame(subs_data)
   
    for r_idx, row in enumerate(dataframe_to_rows(df, index=False, header=True), 1):
        ws.append(row)
        if r_idx == 1:
            for cell in ws[1]:
                cell.font = Font(bold=True, color="FFFFFF")
                cell.fill = PatternFill(start_color="1F4E78", end_color="1F4E78", fill_type="solid")
   
    wb.save(file_path)

async def generate_referrals_report(file_path: str):
    wb = Workbook()
    ws = wb.active
    ws.title = "–ê–Ω–∞–ª–∏–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"
   
    with Session() as session:
        referral_data = session.query(ReferralData).all()
       
        ref_data = []
        for ref in referral_data:
            if ref.referrals_paid_count > 0:  # –¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏
                ref_data.append({
                    '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å': f"{ref.user.username or ''} ({ref.user.id})",
                    '–ë–∞–ª–∞–Ω—Å': ref.referral_balance,
                    '–û–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã': ref.referrals_paid_count,
                    '–î–æ—Ö–æ–¥': ref.cash_income,
                    '–ê–∫—Ç–∏–≤–∞—Ü–∏–∏': ref.activations_count,
                    '–°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç': ref.payments_sum,
                    '–°—Ä–µ–¥–Ω—è—è –≤—ã–ø–ª–∞—Ç–∞': ref.payments_sum / ref.payments_count if ref.payments_count else 0
                })
   
    df = pd.DataFrame(ref_data)
   
    for r_idx, row in enumerate(dataframe_to_rows(df, index=False, header=True), 1):
        ws.append(row)
        if r_idx == 1:
            for cell in ws[1]:
                cell.font = Font(bold=True, color="FFFFFF")
                cell.fill = PatternFill(start_color="1F4E78", end_color="1F4E78", fill_type="solid")
   
    wb.save(file_path)

async def generate_full_report(file_path: str):
    wb = Workbook()
    
    # Users Analysis (unchanged)
    ws = wb.active
    ws.title = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
    with Session() as session:
        users = session.query(User).all()
        users_data = []
        for user in users:
            active_subs = session.query(func.count(ActiveSubscription.id))\
                .filter(ActiveSubscription.user_id == user.id).scalar()
            referred_users = session.query(func.count(User.id))\
                .filter(User.referred_by_id == user.id).scalar()
            trial_count = session.query(func.count(UsedTrial.id))\
                .filter(UsedTrial.user_id == user.id).scalar()
            users_data.append({
                'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è': user.id,
                '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è': user.username,
                '–ü–æ–ª–Ω–æ–µ –∏–º—è': f"{user.first_name or ''} {user.last_name or ''}".strip(),
                '–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏': active_subs,
                '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø—Ä–æ–±–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤': trial_count,
                '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏': referred_users,
                '–í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π': len(user.categories)
            })
    
    df_users = pd.DataFrame(users_data)
    for r_idx, row in enumerate(dataframe_to_rows(df_users, index=False, header=True), 1):
        ws.append(row)
        if r_idx == 1:
            for cell in ws[1]:
                cell.font = Font(bold=True, color="FFFFFF")
                cell.fill = PatternFill(start_color="1F4E78", end_color="1F4E78", fill_type="solid")
    
    # Categories Analysis
    ws = wb.create_sheet("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
    with Session() as session:
        categories = session.query(Category).all()
        categories_data = []
        for category in categories:
            active_subs = session.query(func.count(ActiveSubscription.id))\
                .filter(ActiveSubscription.category_id == category.id)\
                .filter(ActiveSubscription.subscription_type != 'trial').scalar()
            trial_users = session.query(func.count(UsedTrial.id))\
                .filter(UsedTrial.category_id == category.id).scalar()
            active_trials = session.query(func.count(ActiveSubscription.id))\
                .filter(
                    ActiveSubscription.category_id == category.id,
                    ActiveSubscription.subscription_type == 'trial'
                ).scalar()
            categories_data.append({
                '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': category.name,
                '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥': '–î–∞' if category.has_3_days_free else '–ù–µ—Ç',
                '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥': trial_users,
                '–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–±–Ω—ã–µ': active_trials,
                '–ú–µ—Å—è—á–Ω–∞—è —Ü–µ–Ω–∞': category.price_monthly,
                '–ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞': category.price_quarterly,
                '–ü–æ–ª—É–≥–æ–¥–æ–≤–∞—è —Ü–µ–Ω–∞': category.price_half_yearly,
                '–ì–æ–¥–æ–≤–∞—è —Ü–µ–Ω–∞': category.price_yearly,
                '–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏': len(category.users),
                '–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏': active_subs,
            })
    
    df_categories = pd.DataFrame(categories_data)
    for r_idx, row in enumerate(dataframe_to_rows(df_categories, index=False, header=True), 1):
        ws.append(row)
        if r_idx == 1:
            for cell in ws[1]:
                cell.font = Font(bold=True, color="FFFFFF")
                cell.fill = PatternFill(start_color="1F4E78", end_color="1F4E78", fill_type="solid")
    
    # Financial Analysis
    ws = wb.create_sheet("–§–∏–Ω–∞–Ω—Å—ã")
    with Session() as session:
        financial_data = []
        for category in categories:
            monthly_subs = session.query(func.count(ActiveSubscription.id))\
                .filter(ActiveSubscription.category_id == category.id)\
                .filter(ActiveSubscription.subscription_type == 'monthly').scalar()
            quarterly_subs = session.query(func.count(ActiveSubscription.id))\
                .filter(ActiveSubscription.category_id == category.id)\
                .filter(ActiveSubscription.subscription_type == 'quarterly').scalar()
            half_yearly_subs = session.query(func.count(ActiveSubscription.id))\
                .filter(ActiveSubscription.category_id == category.id)\
                .filter(ActiveSubscription.subscription_type == 'half_yearly').scalar()
            yearly_subs = session.query(func.count(ActiveSubscription.id))\
                .filter(ActiveSubscription.category_id == category.id)\
                .filter(ActiveSubscription.subscription_type == 'yearly').scalar()
            
            monthly_revenue = monthly_subs * category.price_monthly
            quarterly_revenue = quarterly_subs * category.price_quarterly
            half_yearly_revenue = half_yearly_subs * category.price_half_yearly
            yearly_revenue = yearly_subs * category.price_yearly
            
            financial_data.append({
                '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': category.name,
                '–ú–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥': monthly_revenue,
                '–ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥': quarterly_revenue,
                '–ü–æ–ª—É–≥–æ–¥–æ–≤–æ–π –¥–æ—Ö–æ–¥': half_yearly_revenue,
                '–ì–æ–¥–æ–≤–æ–π –¥–æ—Ö–æ–¥': yearly_revenue,
                '–û–±—â–∏–π –¥–æ—Ö–æ–¥': monthly_revenue + quarterly_revenue + half_yearly_revenue + yearly_revenue
            })
    
    df_financial = pd.DataFrame(financial_data)
    df_financial.loc[len(df_financial)] = ['–ò–¢–û–ì–û', 
                                         df_financial['–ú–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥'].sum(),
                                         df_financial['–ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥'].sum(),
                                         df_financial['–ü–æ–ª—É–≥–æ–¥–æ–≤–æ–π –¥–æ—Ö–æ–¥'].sum(),
                                         df_financial['–ì–æ–¥–æ–≤–æ–π –¥–æ—Ö–æ–¥'].sum(),
                                         df_financial['–û–±—â–∏–π –¥–æ—Ö–æ–¥'].sum()]
    
    for r_idx, row in enumerate(dataframe_to_rows(df_financial, index=False, header=True), 1):
        ws.append(row)
        if r_idx == 1:
            for cell in ws[1]:
                cell.font = Font(bold=True, color="FFFFFF")
                cell.fill = PatternFill(start_color="1F4E78", end_color="1F4E78", fill_type="solid")
    
    # Subscriptions Analysis
    ws = wb.create_sheet("–ü–æ–¥–ø–∏—Å–∫–∏")
    with Session() as session:
        active_subs = session.query(ActiveSubscription).all()
        subs_data = []
        for sub in active_subs:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            sub_type_display = {
                'trial': '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥',
                'monthly': '–ú–µ—Å—è—á–Ω–∞—è',
                'quarterly': '–ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è',
                'half_yearly': '–ü–æ–ª—É–≥–æ–¥–æ–≤–∞—è',
                'yearly': '–ì–æ–¥–æ–≤–∞—è'
            }.get(sub.subscription_type, sub.subscription_type)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É (–¥–ª—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ - 0)
            price = 0 if sub.subscription_type == 'trial' else getattr(
                sub.category, f'price_{sub.subscription_type}', 0
            )
            
            subs_data.append({
                '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å': f"{sub.user.username or ''} ({sub.user.id})",
                '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': sub.category.name,
                '–¢–∏–ø': sub_type_display,
                '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞': sub.start_date.strftime('%d.%m.%Y'),
                '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è': sub.end_date.strftime('%d.%m.%Y'),
                '–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π': (sub.end_date - datetime.now()).days,
                '–¶–µ–Ω–∞': price
            })
    
    df_subs = pd.DataFrame(subs_data)
    for r_idx, row in enumerate(dataframe_to_rows(df_subs, index=False, header=True), 1):
        ws.append(row)
        if r_idx == 1:
            for cell in ws[1]:
                cell.font = Font(bold=True, color="FFFFFF")
                cell.fill = PatternFill(start_color="1F4E78", end_color="1F4E78", fill_type="solid")

    # Referrals Analysis (unchanged)
    ws = wb.create_sheet("–†–µ—Ñ–µ—Ä–∞–ª—ã")
    with Session() as session:
        referral_data = session.query(ReferralData).all()
        ref_data = []
        for ref in referral_data:
            if ref.referrals_paid_count > 0:
                ref_data.append({
                    '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å': f"{ref.user.username or ''} ({ref.user.id})",
                    '–ë–∞–ª–∞–Ω—Å': ref.referral_balance,
                    '–û–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã': ref.referrals_paid_count,
                    '–î–æ—Ö–æ–¥': ref.cash_income,
                    '–ê–∫—Ç–∏–≤–∞—Ü–∏–∏': ref.activations_count,
                    '–°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç': ref.payments_sum,
                    '–°—Ä–µ–¥–Ω—è—è –≤—ã–ø–ª–∞—Ç–∞': ref.payments_sum / ref.payments_count if ref.payments_count else 0
                })
    
    df_refs = pd.DataFrame(ref_data)
    for r_idx, row in enumerate(dataframe_to_rows(df_refs, index=False, header=True), 1):
        ws.append(row)
        if r_idx == 1:
            for cell in ws[1]:
                cell.font = Font(bold=True, color="FFFFFF")
                cell.fill = PatternFill(start_color="1F4E78", end_color="1F4E78", fill_type="solid")
    
    # Summary Sheet
    ws = wb.create_sheet("–°–≤–æ–¥–∫–∞", 0)
    summary_data = {
        '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': [
            '–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
            '–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º',
            '–í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
            '–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫',
            '–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–±–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤',
            '–û–±—â–∏–π –º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥',
            '–û–±—â–∏–π –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥',
            '–û–±—â–∏–π –ø–æ–ª—É–≥–æ–¥–æ–≤–æ–π –¥–æ—Ö–æ–¥',
            '–û–±—â–∏–π –≥–æ–¥–æ–≤–æ–π –¥–æ—Ö–æ–¥',
            '–û–±—â–∏–π –¥–æ—Ö–æ–¥',
            '–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã',
            '–û–±—â–∞—è —Å—É–º–º–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç'
        ],
        '–ó–Ω–∞—á–µ–Ω–∏–µ': [
            len(df_users),
            df_users['–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏'].astype(bool).sum(),
            df_users['–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø—Ä–æ–±–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤'].astype(bool).sum(),
            len(df_categories),
            len(df_subs),
            len(df_subs[df_subs['–¢–∏–ø'] == '–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥']),
            df_financial['–ú–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥'].sum(),
            df_financial['–ö–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥'].sum(),
            df_financial['–ü–æ–ª—É–≥–æ–¥–æ–≤–æ–π –¥–æ—Ö–æ–¥'].sum(),
            df_financial['–ì–æ–¥–æ–≤–æ–π –¥–æ—Ö–æ–¥'].sum(),
            df_financial['–û–±—â–∏–π –¥–æ—Ö–æ–¥'].sum(),
            len(df_refs),
            df_refs['–°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç'].sum() if len(df_refs) > 0 else 0
        ]
    }
    
    df_summary = pd.DataFrame(summary_data)
    for r_idx, row in enumerate(dataframe_to_rows(df_summary, index=False, header=True), 1):
        ws.append(row)
        if r_idx == 1:
            for cell in ws[1]:
                cell.font = Font(bold=True, color="FFFFFF")
                cell.fill = PatternFill(start_color="1F4E78", end_color="1F4E78", fill_type="solid")
    
    # Adjust column widths for all sheets
    for sheet in wb.sheetnames:
        ws = wb[sheet]
        for column in ws.columns:
            max_length = 0
            column = [cell for cell in column]
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = (max_length + 2)
            ws.column_dimensions[column[0].column_letter].width = adjusted_width
    
    wb.save(file_path)

